// Teste para verificar sess√£o do usu√°rio na p√°gina Admin
require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseAnonKey || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente ausentes');
  process.exit(1);
}

async function testAdminSession() {
  console.log('üîç Teste de Sess√£o - P√°gina Admin');
  console.log('==================================================\n');

  // Cliente an√¥nimo (como usado na p√°gina admin)
  const anonClient = createClient(supabaseUrl, supabaseAnonKey);
  
  console.log('üìã Teste 1: Cliente An√¥nimo (como na p√°gina admin)');
  console.log('==================================================');
  
  // Verificar se h√° usu√°rio logado
  const { data: { user }, error: userError } = await anonClient.auth.getUser();
  
  if (userError) {
    console.log('‚ùå Erro ao obter usu√°rio:', userError.message);
  } else if (user) {
    console.log('‚úÖ Usu√°rio encontrado:', {
      id: user.id,
      email: user.email,
      role: user.role
    });
  } else {
    console.log('‚ùå Nenhum usu√°rio logado');
  }
  
  // Testar opera√ß√£o que requer autentica√ß√£o
  console.log('\nüîß Testando INSERT em rooms (requer auth):');
  const { data: insertData, error: insertError } = await anonClient
    .from('rooms')
    .insert({ name: 'Teste Session', active: true })
    .select()
    .single();
    
  if (insertError) {
    console.log('‚ùå Erro esperado:', insertError.message);
  } else {
    console.log('‚úÖ Sucesso inesperado:', insertData);
    // Limpar teste
    await anonClient.from('rooms').delete().eq('id', insertData.id);
  }
  
  console.log('\nüìã Teste 2: Cliente Service Role (para compara√ß√£o)');
  console.log('==================================================');
  
  const serviceClient = createClient(supabaseUrl, supabaseServiceKey);
  
  const { data: serviceInsert, error: serviceError } = await serviceClient
    .from('rooms')
    .insert({ name: 'Teste Service', active: true })
    .select()
    .single();
    
  if (serviceError) {
    console.log('‚ùå Erro inesperado:', serviceError.message);
  } else {
    console.log('‚úÖ Sucesso esperado:', serviceInsert);
    // Limpar teste
    await serviceClient.from('rooms').delete().eq('id', serviceInsert.id);
  }
  
  console.log('\nüéØ Diagn√≥stico:');
  console.log('==================================================');
  console.log('1. Se o cliente an√¥nimo n√£o tem usu√°rio logado, isso explica');
  console.log('   por que as opera√ß√µes CRUD falham na p√°gina admin.');
  console.log('2. A p√°gina admin precisa de um mecanismo para manter a sess√£o');
  console.log('   do usu√°rio autenticado.');
  console.log('3. Poss√≠veis solu√ß√µes:');
  console.log('   - Usar useEffect para verificar/restaurar sess√£o');
  console.log('   - Implementar context de autentica√ß√£o');
  console.log('   - Verificar se cookies de sess√£o est√£o sendo mantidos');
}

// Executar teste
testAdminSession().catch(console.error);