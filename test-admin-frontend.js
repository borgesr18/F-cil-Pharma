import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  process.exit(1);
}

// Cliente com anon key (como usado no frontend)
const supabase = createClient(supabaseUrl, supabaseAnonKey);

console.log('üîß Teste de Opera√ß√µes CRUD - Frontend Admin');
console.log('==================================================');

async function testFrontendCRUD() {
  try {
    console.log('\nüìã Passo 1: Verificar sess√£o atual');
    console.log('==================================================');
    
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.log('‚ùå Erro ao verificar sess√£o:', sessionError.message);
    } else if (!session) {
      console.log('‚ö†Ô∏è  Nenhuma sess√£o ativa encontrada');
      console.log('   Isso explica por que as opera√ß√µes CRUD falham na interface!');
    } else {
      console.log('‚úÖ Sess√£o ativa encontrada:', session.user.email);
    }

    console.log('\nüìã Passo 2: Testar opera√ß√µes sem autentica√ß√£o (anon)');
    console.log('==================================================');
    
    // Teste de leitura
    console.log('üìñ Testando leitura de salas...');
    const { data: rooms, error: readError } = await supabase
      .from('rooms')
      .select('*');
    
    if (readError) {
      console.log('‚ùå Erro na leitura:', readError.message);
    } else {
      console.log(`‚úÖ ${rooms.length} salas lidas com sucesso`);
    }

    // Teste de cria√ß√£o
    console.log('\n‚ûï Testando cria√ß√£o de sala...');
    const { data: newRoom, error: createError } = await supabase
      .from('rooms')
      .insert({ name: 'Sala Frontend Test' })
      .select()
      .single();
    
    if (createError) {
      console.log('‚ùå Erro na cria√ß√£o:', createError.message);
      console.log('   C√≥digo do erro:', createError.code);
      console.log('   Detalhes:', createError.details);
    } else {
      console.log('‚úÖ Sala criada:', newRoom.name);
      
      // Teste de atualiza√ß√£o
      console.log('\n‚úèÔ∏è  Testando atualiza√ß√£o de sala...');
      const { error: updateError } = await supabase
        .from('rooms')
        .update({ name: 'Sala Frontend Test Updated' })
        .eq('id', newRoom.id);
      
      if (updateError) {
        console.log('‚ùå Erro na atualiza√ß√£o:', updateError.message);
      } else {
        console.log('‚úÖ Sala atualizada com sucesso');
      }
      
      // Teste de exclus√£o
      console.log('\nüóëÔ∏è  Testando exclus√£o de sala...');
      const { error: deleteError } = await supabase
        .from('rooms')
        .delete()
        .eq('id', newRoom.id);
      
      if (deleteError) {
        console.log('‚ùå Erro na exclus√£o:', deleteError.message);
      } else {
        console.log('‚úÖ Sala exclu√≠da com sucesso');
      }
    }

    console.log('\nüìã Passo 3: Verificar pol√≠ticas RLS');
    console.log('==================================================');
    
    // Verificar se RLS est√° bloqueando opera√ß√µes
    const tables = ['rooms', 'meds', 'kits'];
    
    for (const table of tables) {
      console.log(`\nüîí Testando ${table}...`);
      
      // Teste de leitura
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1);
      
      if (error) {
        console.log(`‚ùå ${table} - Erro na leitura:`, error.message);
      } else {
        console.log(`‚úÖ ${table} - Leitura permitida (${data.length} registros)`);
      }
      
      // Teste de inser√ß√£o
      const testData = {
        rooms: { name: `Test Room ${Date.now()}` },
        meds: { name: `Test Med ${Date.now()}`, unit: 'un' },
        kits: { key: `test_${Date.now()}`, name: `Test Kit ${Date.now()}` }
      };
      
      const { error: insertError } = await supabase
        .from(table)
        .insert(testData[table]);
      
      if (insertError) {
        console.log(`‚ùå ${table} - Erro na inser√ß√£o:`, insertError.message);
        if (insertError.code) {
          console.log(`   C√≥digo: ${insertError.code}`);
        }
      } else {
        console.log(`‚úÖ ${table} - Inser√ß√£o permitida`);
      }
    }

    console.log('\nüìã Resumo do Teste');
    console.log('==================================================');
    console.log('Se as opera√ß√µes falharam com "permission denied" ou "RLS",');
    console.log('o problema est√° nas pol√≠ticas RLS que n√£o permitem acesso');
    console.log('para usu√°rios n√£o autenticados (anon role).');
    console.log('\nSolu√ß√£o: Criar pol√≠ticas RLS adequadas ou garantir que');
    console.log('os usu√°rios estejam autenticados antes de acessar a p√°gina Admin.');
    
  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error);
  }
}

testFrontendCRUD();