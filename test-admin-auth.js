import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  process.exit(1);
}

// Criar clientes
const anonClient = createClient(supabaseUrl, supabaseAnonKey);
const serviceClient = supabaseServiceKey ? createClient(supabaseUrl, supabaseServiceKey) : null;

async function testAuthAndPermissions() {
  console.log('üîê Testando autentica√ß√£o e permiss√µes para p√°gina Admin\n');

  // Teste 1: Cliente an√¥nimo (como na interface web sem login)
  console.log('üìã Teste 1: Cliente An√¥nimo (sem autentica√ß√£o)');
  console.log('=' .repeat(50));
  
  try {
    // Verificar status de autentica√ß√£o
    const { data: { user }, error: authError } = await anonClient.auth.getUser();
    console.log('üë§ Status de autentica√ß√£o:', user ? 'Autenticado' : 'N√£o autenticado');
    if (authError) console.log('‚ö†Ô∏è Erro de auth:', authError.message);
    
    // Testar SELECT em cada tabela
    const tables = ['rooms', 'meds', 'kits'];
    
    for (const table of tables) {
      console.log(`\nüîç Testando SELECT em ${table}:`);
      const { data, error } = await anonClient
        .from(table)
        .select('*')
        .limit(3);
      
      if (error) {
        console.log(`  ‚ùå Erro: ${error.message}`);
        console.log(`  üìù C√≥digo: ${error.code}`);
        console.log(`  üìÑ Detalhes: ${error.details}`);
      } else {
        console.log(`  ‚úÖ Sucesso: ${data.length} registros encontrados`);
        if (data.length > 0) {
          console.log(`  üìÑ Primeiro registro:`, JSON.stringify(data[0], null, 2));
        }
      }
    }
    
    // Testar INSERT (deve falhar para usu√°rio n√£o autenticado)
    console.log('\n‚ûï Testando INSERT em rooms (deve falhar):');
    const { data: insertData, error: insertError } = await anonClient
      .from('rooms')
      .insert([{ name: 'Teste Auth', active: true }]);
    
    if (insertError) {
      console.log(`  ‚ùå Erro esperado: ${insertError.message}`);
    } else {
      console.log(`  ‚ö†Ô∏è INSERT funcionou (inesperado):`, insertData);
    }
    
  } catch (err) {
    console.error('‚ùå Erro no teste an√¥nimo:', err.message);
  }

  // Teste 2: Cliente com service role (simulando usu√°rio admin)
  if (serviceClient) {
    console.log('\n\nüìã Teste 2: Cliente Service Role (admin)');
    console.log('=' .repeat(50));
    
    try {
      // Testar opera√ß√µes CRUD completas
      const tables = ['rooms', 'meds', 'kits'];
      
      for (const table of tables) {
        console.log(`\nüîß Testando CRUD completo em ${table}:`);
        
        // SELECT
        const { data: selectData, error: selectError } = await serviceClient
          .from(table)
          .select('*')
          .limit(3);
        
        if (selectError) {
          console.log(`  ‚ùå SELECT falhou: ${selectError.message}`);
          continue;
        }
        
        console.log(`  ‚úÖ SELECT: ${selectData.length} registros`);
        
        // INSERT
        let testData;
        switch (table) {
          case 'rooms':
            testData = { name: 'Teste Auth Room', active: true };
            break;
          case 'meds':
            testData = { name: 'Teste Auth Med', unit: 'mg', high_alert: false, active: true };
            break;
          case 'kits':
            testData = { key: 'TEST_AUTH_KIT', name: 'Teste Auth Kit', active: true };
            break;
        }
        
        const { data: insertData, error: insertError } = await serviceClient
          .from(table)
          .insert([testData])
          .select();
        
        if (insertError) {
          console.log(`  ‚ùå INSERT falhou: ${insertError.message}`);
          continue;
        }
        
        console.log(`  ‚úÖ INSERT: Registro criado com ID ${insertData[0].id}`);
        
        // UPDATE
        const updateData = { ...testData, name: testData.name + ' - Atualizado' };
        const { error: updateError } = await serviceClient
          .from(table)
          .update(updateData)
          .eq('id', insertData[0].id);
        
        if (updateError) {
          console.log(`  ‚ùå UPDATE falhou: ${updateError.message}`);
        } else {
          console.log(`  ‚úÖ UPDATE: Registro atualizado`);
        }
        
        // DELETE
        const { error: deleteError } = await serviceClient
          .from(table)
          .delete()
          .eq('id', insertData[0].id);
        
        if (deleteError) {
          console.log(`  ‚ùå DELETE falhou: ${deleteError.message}`);
        } else {
          console.log(`  ‚úÖ DELETE: Registro removido`);
        }
      }
      
    } catch (err) {
      console.error('‚ùå Erro no teste service role:', err.message);
    }
  }

  console.log('\nüéØ Resumo dos Testes:');
  console.log('=' .repeat(50));
  console.log('1. Se o cliente an√¥nimo conseguir fazer SELECT mas n√£o INSERT/UPDATE/DELETE,');
  console.log('   isso indica que as pol√≠ticas RLS est√£o funcionando corretamente.');
  console.log('2. Se o service role conseguir fazer todas as opera√ß√µes,');
  console.log('   isso confirma que o banco est√° funcionando.');
  console.log('3. O problema na interface pode ser de autentica√ß√£o do usu√°rio.');
  console.log('\nüí° Pr√≥ximos passos:');
  console.log('- Verificar se o usu√°rio est√° logado na interface');
  console.log('- Verificar se o usu√°rio tem as permiss√µes corretas (admin/pharmacy)');
  console.log('- Verificar se as pol√≠ticas RLS est√£o permitindo opera√ß√µes para usu√°rios autenticados');
}

// Executar testes
testAuthAndPermissions().catch(console.error);